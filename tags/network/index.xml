<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Network on Cassius0924 的博客</title>
    <link>https://blog.cassdev.com/tags/network/</link>
    <description>Recent content in Network on Cassius0924 的博客</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2025-2025 Cassius0924. All rights reserved.</copyright>
    <lastBuildDate>Thu, 27 Jun 2024 20:12:42 +0800</lastBuildDate>
    <atom:link href="https://blog.cassdev.com/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP 协议版本变化学习笔记</title>
      <link>https://blog.cassdev.com/posts/http-%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 27 Jun 2024 20:12:42 +0800</pubDate>
      <guid>https://blog.cassdev.com/posts/http-%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;互联网发展至今，HTTP 协议已经发展了多个版本，分别为 &lt;code&gt;HTTP/1.0&lt;/code&gt;、&lt;code&gt;HTTP/1.1&lt;/code&gt;、&lt;code&gt;HTTP/2.0&lt;/code&gt;、&lt;code&gt;HTTP/3.0&lt;/code&gt;，本文将对这几个版本的变化进行学习笔记。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;HTTP 协议层&#34; loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2024/06/27/6KE87inXyFe4DbW.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;http10&#34;&gt;HTTP/1.0&lt;/h2&gt;&lt;p&gt;HTTP/1.0 是最早的 HTTP 协议版本，它的特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;每次请求都会建立一个新的 TCP 连接，请求结束后立即断开连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个请求都会包含完整的请求头和请求体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支持持久连接，每次请求都需要重新建立连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支持管道化，即同一个连接中不能同时发送多个请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;http11&#34;&gt;HTTP/1.1&lt;/h2&gt;&lt;p&gt;HTTP/1.1 是对 HTTP/1.0 的改进，它的特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;支持持久连接（Keep-Alive），即同一个连接可以发送多个请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持管道化，即同一个连接中可以同时发送多个请求。但是，由于 HTTP/1.1 中的管道化存在队头阻塞问题，所以很少被使用。默认为关闭状态，并且大多数浏览器也不支持。 &lt;strong&gt;所以我们认为 HTTP/1.1 不支持管道化&lt;/strong&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTTP/1.1 的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;队头阻塞问题：如果一个请求响应时间过长，那么后面的请求就会被阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;明文传输：HTTP/1.1 的数据传输是纯文本且未加密的，容易被窃听。比如状态码 &lt;code&gt;200&lt;/code&gt; 会被分为 &lt;code&gt;2&lt;/code&gt;、&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;0&lt;/code&gt; 三个字节传输。这点会在 HTTP/2.0 中得到改进。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;头部冗余：每次请求都需要携带完整的请求头，头部信息冗余。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;https&#34;&gt;HTTPS&lt;/h2&gt;&lt;p&gt;在讲述 HTTP/2.0 之前，我们先来了解一下 HTTPS。&lt;/p&gt;
&lt;p&gt;HTTPS 是在 HTTP 的基础上加入了 SSL/TLS 加密层，使得数据传输更加安全。HTTPS 的特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据加密：HTTPS 使用 SSL/TLS 加密传输数据，保证数据传输的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;身份认证：HTTPS 使用证书机制对服务器和客户端进行身份认证，防止中间人攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据完整性：HTTPS 使用数字签名对数据进行完整性校验，防止数据被篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加密方式：对称加密、非对称加密、数字签名。&lt;/p&gt;
&lt;p&gt;通信前使用非对称加密协商对称加密的密钥，通信过程使用对称加密传输数据，保证数据传输的安全性。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;HTTPS&#34; loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2024/06/27/wcztbDYBevjP26L.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;http20&#34;&gt;HTTP/2.0&lt;/h2&gt;&lt;p&gt;HTTP/2.0 是对 HTTP/1.1 的重大升级，它的特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;头部压缩：HTTP/2.0 使用 HPACK 算法对头部进行压缩，如果请求头中包含相同的字段，只需要发送一次，后续请求只需要发送索引，接着从静态表或动态表中获取对应的值。解决了 HTTP/1.1 中头部冗余的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP 的常见拥塞控制算法学习笔记</title>
      <link>https://blog.cassdev.com/posts/tcp-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 27 Jun 2024 13:54:31 +0800</pubDate>
      <guid>https://blog.cassdev.com/posts/tcp-%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;TCP 的拥塞控制算法有几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tahoe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reno&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NewReno&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SACK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CUBIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BBR&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

            &lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.cassdev.com/css/vendors/admonitions.4fd9a0b8ec8899f2ca952048d255a569f433f77dfb3f52f5bc87e7d65cdce449.css&#34; integrity=&#34;sha256-T9mguOyImfLKlSBI0lWlafQz9337P1L1vIfn1lzc5Ek=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;div class=&#34;admonition note&#34;&gt;
      &lt;div class=&#34;admonition-header&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 576 512&#34;&gt;&lt;path d=&#34;M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z&#34;/&gt;&lt;/svg&gt;
        &lt;span&gt;笔记&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&#34;admonition-content&#34;&gt;
        &lt;p&gt;MSS: Maximum Segment Size，最大分段大小。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Socket API 和 Linux Socket API</title>
      <link>https://blog.cassdev.com/posts/windows-socket-api-%E5%92%8C-linux-socket-api/</link>
      <pubDate>Sun, 16 Jun 2024 19:13:10 +0800</pubDate>
      <guid>https://blog.cassdev.com/posts/windows-socket-api-%E5%92%8C-linux-socket-api/</guid>
      <description>&lt;p&gt;本文章主要介绍 Windows 下和 Linux 下的 Socket 编程区别，即 Windows Socket API 和 Linux Socket API 的区别。&lt;/p&gt;
&lt;h2 id=&#34;头文件&#34;&gt;头文件&lt;/h2&gt;&lt;p&gt;Windows 环境下的 Socket 编程需要以下头文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;WinSock2.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;WS2tcpip.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;div class=&#34;admonition note&#34;&gt;
      &lt;div class=&#34;admonition-header&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 576 512&#34;&gt;&lt;path d=&#34;M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z&#34;/&gt;&lt;/svg&gt;
        &lt;span&gt;笔记&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&#34;admonition-content&#34;&gt;
        &lt;p&gt;如果使用 MSVC 编译器，那么还需要使用预处理指令 &lt;code&gt;#pragma comment(lib, &amp;quot;Ws2_32.lib&amp;quot;)&lt;/code&gt; 来链接 &lt;code&gt;Ws2_32.lib&lt;/code&gt; 库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS ClashX Pro 配置指南</title>
      <link>https://blog.cassdev.com/posts/macos-clashx-pro-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 16 Jun 2024 11:20:31 +0800</pubDate>
      <guid>https://blog.cassdev.com/posts/macos-clashx-pro-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mixed-port: 7890

# Linux 和 macOS 的 redir 代理端口
redir-port: 7892

# 允许局域网的连接
allow-lan: true

# 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）
mode: rule

# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。
# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: info
# Clash 的 RESTful API
external-controller: &amp;#39;0.0.0.0:9090&amp;#39;

# RESTful API 的口令
secret: &amp;#39;&amp;#39;

dns:
  enable: true
  ipv6: true
  listen: &amp;#39;0.0.0.0:53&amp;#39;
  use-hosts: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  nameserver:
    - 202.120.224.6
    - 114.114.114.114
    - 223.5.5.5
    - &amp;#39;tcp://223.5.5.5&amp;#39;
  fallback:
    - &amp;#39;tls://223.5.5.5:853&amp;#39;
    - &amp;#39;https://223.5.5.5/dns-query&amp;#39;
  fallback-filter:
    geoip: true
    ipcidr:
      - 240.0.0.0/4
# proxy provider start here
proxy-providers:
  feiniao:
    type: http
    path: ./profiles/feiniao.yaml
    url: https://apiv1.v27qae.com/flydsubal/c8lr21z6wpiebqqx?clash=1&amp;amp;extend=1
    interval: 36000
    health-check:
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 3600
  yiyuan:
    type: http
    path: ./profiles/yiyuan.yaml
    url: https://sub1.smallstrawberry.com/api/v1/client/subscribe?token=d6e73f953b6053a3b263b73f9509375d
    decode-url: true
    interval: 36000
    health-check:
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 3600


# proxy provider end
proxies:
    # socks5
  - name: windowsServer
    type: socks5
    server: 10.127.78.177
    port: 7890
    # username: username
    # password: password
    # tls: true
    # skip-cert-verify: true
    # udp: true

  # - {name: 🇮🇪 中国-爱尔兰 IPLC C04, server: ir04.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB}
  # - {name: 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C02, server: hkhe02.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB}
  # - {name: 🇮🇪 中国-爱尔兰 IPLC C03, server: ir03.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB}
  # - {name: 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C09, server: hkhe09.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB}
  # - {name: 🇨🇳 中国-香港 IEPL Equinix HK8 C 02 1Gbps HBO TVB, server: sg12.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB, udp: true}
  # - {name: 🇨🇳 中国-爱尔兰 IPLC C05, server: ir05.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB, udp: true}
  # - {name: 🇨🇳 中国-香港 IPLC Equinix HK2 C 06 1Gbps HBO TVB, server: sg06.cathayroute.com, port: 33400, type: ss, cipher: rc4-md5, password: SRCFiB, udp: true}

proxy-groups:
  - name: Proxies
    type: select
    proxies:
      - 机场节点
      - 自动选择
      - 故障转移

  # - name: 手动节点
  #   type: select
  #   proxies:
  #     - 🇮🇪 中国-爱尔兰 IPLC C04
  #     - 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C02
  #     - 🇮🇪 中国-爱尔兰 IPLC C03
  #     - 🇭🇰 香港 油尖旺御金·国峯 名氣通電訊 C09   
  #     - 🇨🇳 中国-香港 IEPL Equinix HK8 C 02 1Gbps HBO TVB
  #     - 🇨🇳 中国-爱尔兰 IPLC C05
  #     - 🇨🇳 中国-香港 IPLC Equinix HK2 C 06 1Gbps HBO TVB

  - name: feiniao
    type: select
    use:
     - feiniao

  - name: yiyuan
    type: select
    use:
     - yiyuan

  - name: 机场节点
    type: select
    proxies:
     - feiniao
     - yiyuan


  - name: 故障转移
    type: fallback
    url: &amp;#39;http://www.gstatic.com/generate_204&amp;#39;
    interval: 7200
    proxies:
     - feiniao
     - yiyuan

  - name: 自动选择
    type: url-test
    url: &amp;#39;http://www.gstatic.com/generate_204&amp;#39;
    interval: 300
    use:
      - feiniao
      - yiyuan

rule-providers:
  reject:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt&amp;#34;
    path: ./ruleset/reject.yaml
    interval: 86400

  icloud:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt&amp;#34;
    path: ./ruleset/icloud.yaml
    interval: 86400

  apple:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt&amp;#34;
    path: ./ruleset/apple.yaml
    interval: 86400

  google:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt&amp;#34;
    path: ./ruleset/google.yaml
    interval: 86400

  proxy:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt&amp;#34;
    path: ./ruleset/proxy.yaml
    interval: 86400

  direct:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt&amp;#34;
    path: ./ruleset/direct.yaml
    interval: 86400

  private:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt&amp;#34;
    path: ./ruleset/private.yaml
    interval: 86400

  gfw:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt&amp;#34;
    path: ./ruleset/gfw.yaml
    interval: 86400

  tld-not-cn:
    type: http
    behavior: domain
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt&amp;#34;
    path: ./ruleset/tld-not-cn.yaml
    interval: 86400

  telegramcidr:
    type: http
    behavior: ipcidr
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt&amp;#34;
    path: ./ruleset/telegramcidr.yaml
    interval: 86400

  cncidr:
    type: http
    behavior: ipcidr
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt&amp;#34;
    path: ./ruleset/cncidr.yaml
    interval: 86400

  lancidr:
    type: http
    behavior: ipcidr
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt&amp;#34;
    path: ./ruleset/lancidr.yaml
    interval: 86400

  applications:
    type: http
    behavior: classical
    url: &amp;#34;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt&amp;#34;
    path: ./ruleset/applications.yaml
    interval: 86400

rules:
  - DOMAIN-SUFFIX,visualstudio.com,DIRECT
  - DOMAIN-SUFFIX,azure.com,DIRECT
  - DOMAIN-SUFFIX,vscode.dev,Proxies
  - RULE-SET,applications,DIRECT
  - DOMAIN,clash.razord.top,DIRECT
  - DOMAIN,yacd.haishan.me,DIRECT
  - RULE-SET,private,DIRECT
  - RULE-SET,reject,REJECT
  - RULE-SET,tld-not-cn,Proxies
  - RULE-SET,gfw,Proxies
  - RULE-SET,telegramcidr,Proxies
  - MATCH,DIRECT
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>VS Code 设置网络代理指南</title>
      <link>https://blog.cassdev.com/posts/vs-code-%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 16 Jun 2024 11:20:31 +0800</pubDate>
      <guid>https://blog.cassdev.com/posts/vs-code-%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;当你使用 VS Code 时，有时你可能需要配置网络代理来访问特定的网络资源（魔法）。&lt;/p&gt;
&lt;p&gt;例如在局域网远程开发时使用 GitHub Copilot Chat 插件并且远程主机无魔法时就可以进行配置网络代理。&lt;/p&gt;
&lt;h2 id=&#34;配置教程&#34;&gt;配置教程&lt;/h2&gt;&lt;p&gt;打开设置，搜索 proxy 找到 Http: Proxy，填入代理地址即可。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;VSCode Proxy&#34; loading=&#34;lazy&#34; src=&#34;https://s2.loli.net/2023/06/30/tQqCS5XvzgmLbFK.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意在远程开发时只能设置远程主机的Http代理，无法设置 VS Code 本机的网络代理。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
